https://www.gutenberg.org/browse/scores/top
accessed on 1/15/16 --Top 100 EBooks yesterday
  Pride and Prejudice by Jane Austen (752)
  Alice's Adventures in Wonderland by Lewis Carroll (575)
  Adventures of Huckleberry Finn by Mark Twain (451)
  Frankenstein; Or, The Modern Prometheus by Mary Wollstonecraft Shelley (389)
  The Adventures of Sherlock Holmes by Arthur Conan Doyle (362)
  Moby Dick; Or, The Whale by Herman Melville (328)
  The Adventures of Tom Sawyer by Mark Twain (328)
  War and Peace by graf Leo Tolstoy (328)
  Beowulf (323)
  Narrative of the Life of Frederick Douglass, an American Slave by Frederick Douglass (299)
  The Yellow Wallpaper by Charlotte Perkins Gilman (296)
  The Kama Sutra of Vatsyayana by Vatsyayana (293)
  Yesterday House by Fritz Leiber (287)
  Metamorphosis by Franz Kafka (285)
  A Tale of Two Cities by Charles Dickens (283)
  Great Expectations by Charles Dickens (273)
  The Golden Key by Mrs. Georgie Sheldon (269)
  Ulysses by James Joyce (260)
  A Doll's House : a play by Henrik Ibsen (255)
  Dracula by Bram Stoker (249)


https://readability-score.com/
  https://github.com/DaveChild/Text-Statistics


inspiration: http://www.c82.net/work/?id=347
https://medium.com/@neuroecology/punctuation-in-novels-8f316d542ec4#.s2mqr5a4b
http://www.vox.com/2016/2/17/11036614/punctuation-visualization


http://shiffman.net/teaching/a2z/week1/

directory raw/ contains:
  A-Dolls-House.txt
  A-Tale-of-Two-Cities.txt
  Adventures-of-Huckleberry-Finn.txt
  Alices-Adventures-in-Wonderland.txt
  Beowulf.txt
  Dracula.txt
  Frankenstein.txt
  Great-Expectations.txt
  Metamorphosis.txt
  Moby-Dick.txt
  Pride-and-Prejudice.txt
  The-Adventures-of-Sherlock-Holmes.txt
  The-Adventures-of-Tom-Sawyer.txt
  The-Golden-Key.txt
  The-Kama-Sutra-of-Vatsyayana.txt
  The-Narrative-of-the-Life-of-Frederick-Douglass.txt
  The-Yellow-Wallpaper.txt
  Ulysses.txt
  War-and-Peace.txt
  Yesterday-House.txt



http://daringfireball.net/projects/markdown/basics




//http://euri.ca/2013/quick-javascript-word-frequency-counter/
<p><textarea id="countthistext" style="width:90%; height: 8em;" onchange="freqCount()"></textarea><br>
Paste your words up there ^ and click down there v<br>
<textarea id="histcount" style="width:90%; height: 8em;"></textarea><br>
<script>
freqCount = function() {
str = jQuery("#countthistext").val()
words = str.toLowerCase().replace(/[^a-z\-]/g," ").split(" ")
hist={}
for( i in words) {
if(words[i].length > 1 ) hist[words[i]] ? hist[words[i]]+=1 : hist[words[i]]=1;
}
var sortable = [];
for (var i in hist) if(hist[i] > 1) sortable.push([i, hist[i]])
sortable.sort(function(a, b) {return b[1] - a[1]})
jQuery("#histcount").val( sortable.join("\n") )
}
// Some help from:
// http://stackoverflow.com/questions/1069666/sorting-javascript-object-by-property-value
// https://gist.github.com/lsauer/1221325
</script></p>


//http://stackoverflow.com/questions/30906807/word-frequency-in-javascript
(function () {

    /* Below is a regular expression that finds alphanumeric characters
       Next is a string that could easily be replaced with a reference to a form control
       Lastly, we have an array that will hold any words matching our pattern */
    var pattern = /\w+/g,
        string = "I I am am am yes yes.",
        matchedWords = string.match( pattern );

    /* The Array.prototype.reduce method assists us in producing a single value from an
       array. In this case, we're going to use it to output an object with results. */
    var counts = matchedWords.reduce(function ( stats, word ) {

        /* `stats` is the object that we'll be building up over time.
           `word` is each individual entry in the `matchedWords` array */
        if ( stats.hasOwnProperty( word ) ) {
            /* `stats` already has an entry for the current `word`.
               As a result, let's increment the count for that `word`. */
            stats[ word ] = stats[ word ] + 1;
        } else {
            /* `stats` does not yet have an entry for the current `word`.
               As a result, let's add a new entry, and set count to 1. */
            stats[ word ] = 1;
        }

        /* Because we are building up `stats` over numerous iterations,
           we need to return it for the next pass to modify it. */
        return stats;

    }, {} );

    /* Now that `counts` has our object, we can log it. */
    console.log( counts );

}());

//http://brettterpstra.com/2011/11/02/word-repetition-checking-with-javascript/
// from php.js
function in_array (needle, haystack) {
  for (key in haystack) {
    if (haystack[key] == needle) {
      return true;
    }
  }
  return false;
}

// short, common words to skip when counting
var stopwords = ['1','2','3','4','5','6','7','8','9','0','one','two','three','four','five','about','actually','always','even','given','into','just','not','Im','thats','its','arent','weve','ive','didnt','dont','the','of','to','and','a','in','is','it','you','that','he','was','for','on','are','with','as','I','his','they','be','at','one','have','this','from','or','had','by','hot','but','some','what','there','we','can','out','were','all','your','when','up','use','how','said','an','each','she','which','do','their','if','will','way','many','then','them','would','like','so','these','her','see','him','has','more','could','go','come','did','my','no','get','me','say','too','here','must','such','try','us','own','oh','any','youll','youre','also','than','those','though','thing','things'];

// takes the text of a paragraph element as input
// returns marked up text with repeated words in 'b' tags with a class matching their "stemmed" root
function checkWords(input) {

  var words = input.split(' ');
  var wordcount = {};

  // build an object to count word frequency
  $.each(words,function(i){
    thisWord = String(this).replace(/[\/\\]/,' ').replace(//g,"'").replace(/[^a-z' ]/gi,'').toLowerCase();
    if (!in_array(thisWord,stopwords)) {
      var word = stemmer(thisWord);
      if (wordcount[word] > 0 && word.length) {
        wordcount[word] += 1;
      } else {
        wordcount[word] = 1;
      }
    }
  });

  // convert the object to an object array
  // include only words repeated more than once within the paragraph
  var topwords = new Array();
  $.each(wordcount,function(w,i){
    if (i > 1)
      topwords.push({'word':w,'freq':i});
  });

  // convert the object array to a flat array
  topwordsArr = new Array();
    $.each(topwords,function(i) {
    topwordsArr.push(String(this['word']));
  });

  // re-parse the output, marking up repeated words based on their stems
  var output = '';
  $.each(words,function(w) {
    var aWord = String(this);
    var stripWord = stemmer(aWord.replace(/[\/\\]/,' ').replace(//g,"'").replace(/[^a-z' ]/gi,'').toLowerCase());
    if (in_array(stripWord,topwordsArr))
      output += ' <b class="'+stripWord+'">'+aWord+'</b>';
    else
      output += ' '+aWord;
  });
  return output;
}

(function($){
  // grab common top-level elements
  grafs = $('p,ul,ol,blockquote,h1,h2,h3,h4,h5,h6,pre code',$('#content'));
  // navigate each element found
  $.each(grafs,function(a,g){
    // if it's a paragraph, we'll process it
    if (grafs[a].tagName == "P") {
      $('#work').append($('<p>').html(checkWords($(grafs[a]).text())));
    // if not, we just stick it back into the DOM
    } else {
      $('#work').append(grafs[a]);
    }
  });
  // set up hover listeners on the 'b' elements
  // the class is pulled from the hovered element
  // all similar words are highlighted on hover
  $('b','#work').hover(function(){
    var thisClass = this.className;
    $('.'+thisClass).addClass('highlight');
  },function(){
    $('.highlight').removeClass('highlight');
  });
})(jQuery);
